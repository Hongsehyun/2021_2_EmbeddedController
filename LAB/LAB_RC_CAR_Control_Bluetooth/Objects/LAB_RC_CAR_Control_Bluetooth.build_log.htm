<html>
<body>
<pre>
<h1>µVision Build Log</h1>
<h2>Tool Versions:</h2>
IDE-Version: •ÏVision V5.35.0.0
Copyright (C) 2021 ARM Ltd and ARM Germany GmbH. All rights reserved.
License Information: Sehyun Hong, Handong Global University, LIC=----
 
Tool Versions:
Toolchain:       MDK-Lite  Version: 5.35.0.2
Toolchain Path:  C:\Keil_v5\ARM\ARMCLANG\Bin
C Compiler:      ArmClang.exe V6.16
Assembler:       Armasm.exe V6.16
Linker/Locator:  ArmLink.exe V6.16
Library Manager: ArmAr.exe V6.16
Hex Converter:   FromElf.exe V6.16
CPU DLL:         SARMCM3.DLL V5.35.0.2
Dialog DLL:      DCM.DLL V1.17.3.0
Target DLL:      STLink\ST-LINKIII-KEIL_SWO.dll V3.0.9.0
Dialog DLL:      TCM.DLL V1.53.0.0
 
<h2>Project:</h2>
C:\Users\sehye\source\repos\EC_2021\LAB\LAB_RC_CAR_Control_Bluetooth\LAB_RC_CAR_Control_Bluetooth.uvprojx
Project File Date:  11/23/2021

<h2>Output:</h2>
*** Using Compiler 'V6.16', folder: 'C:\Keil_v5\ARM\ARMCLANG\Bin'
Build target 'Target 1'
LAB_RC_CAR_Control_Bluetooth.c(9): warning: In file included from...
../../Lib\EC_HAL.h(20): warning: In file included from...
../../Lib/ecUART.h(40): warning: this function declaration is not a prototype [-Wstrict-prototypes]
void UART2_init();
               ^
                void
LAB_RC_CAR_Control_Bluetooth.c(28): warning: multi-character character constant [-Wmultichar]
static volatile uint32_t buf        = '\n\r';
                                      ^
LAB_RC_CAR_Control_Bluetooth.c(80): warning: implicit conversion turns floating-point number into integer: 'volatile float' to 'uint32_t' (aka 'unsigned int') [-Wfloat-conversion]
   PWM_period_ms(&pwm_1, PWM1_period);     
   ~~~~~~~~~~~~~         ^~~~~~~~~~~
LAB_RC_CAR_Control_Bluetooth.c(82): warning: implicit conversion turns floating-point number into integer: 'volatile float' to 'uint32_t' (aka 'unsigned int') [-Wfloat-conversion]
   PWM_period_us(&pwm_2, PWM2_period);
   ~~~~~~~~~~~~~         ^~~~~~~~~~~
LAB_RC_CAR_Control_Bluetooth.c(99): warning: passing 'volatile uint8_t *' (aka 'volatile unsigned char *') to parameter of type 'uint8_t *' (aka 'unsigned char *') discards qualifiers [-Wincompatible-pointer-types-discards-qualifiers]
      USART_write(USART1,&mcu2Data,1);      
                         ^~~~~~~~~
../../Lib/ecUART.h(41): note: passing argument to parameter 'buffer' here
void USART_write(USART_TypeDef* USARTx, uint8_t* buffer, uint32_t nBytes);
                                                 ^
LAB_RC_CAR_Control_Bluetooth.c(107): warning: incompatible pointer types passing 'volatile uint32_t *' (aka 'volatile unsigned int *') to parameter of type 'uint8_t *' (aka 'unsigned char *') [-Wincompatible-pointer-types]
         USART_write(USART1,&buf,2);
                            ^~~~
../../Lib/ecUART.h(41): note: passing argument to parameter 'buffer' here
void USART_write(USART_TypeDef* USARTx, uint8_t* buffer, uint32_t nBytes);
                                                 ^
LAB_RC_CAR_Control_Bluetooth.c(113): warning: implicitly declaring library function 'memset' with type 'void *(void *, int, unsigned int)' [-Wimplicit-function-declaration]
            memset(buffer, 0, sizeof(char) * maxBuf);       // To reset all value to 0. in buffer.
            ^
LAB_RC_CAR_Control_Bluetooth.c(113): note: include the header <string.h> or explicitly provide a declaration for 'memset'
LAB_RC_CAR_Control_Bluetooth.c(113): warning: passing 'volatile uint8_t [100]' to parameter of type 'void *' discards qualifiers [-Wincompatible-pointer-types-discards-qualifiers]
            memset(buffer, 0, sizeof(char) * maxBuf);       // To reset all value to 0. in buffer.
                   ^~~~~~
LAB_RC_CAR_Control_Bluetooth.c(113): warning: implicit conversion changes signedness: 'volatile int' to 'unsigned int' [-Wsign-conversion]
            memset(buffer, 0, sizeof(char) * maxBuf);       // To reset all value to 0. in buffer.
                                           ~ ^~~~~~
LAB_RC_CAR_Control_Bluetooth.c(126): warning: passing 'volatile uint8_t *' (aka 'volatile unsigned char *') to parameter of type 'uint8_t *' (aka 'unsigned char *') discards qualifiers [-Wincompatible-pointer-types-discards-qualifiers]
      USART_write(USART1,&pcData,1);   // transmit char to USART1
                         ^~~~~~~
../../Lib/ecUART.h(41): note: passing argument to parameter 'buffer' here
void USART_write(USART_TypeDef* USARTx, uint8_t* buffer, uint32_t nBytes);
                                                 ^
LAB_RC_CAR_Control_Bluetooth.c(135): warning: declaration shadows a variable in the global scope [-Wshadow]
void RC_control(uint8_t cmd){
                        ^
LAB_RC_CAR_Control_Bluetooth.c(23): note: previous declaration is here
static volatile uint8_t cmd           = 0;
                        ^
LAB_RC_CAR_Control_Bluetooth.c(137): warning: implicit conversion increases floating-point precision: 'volatile float' to 'double' [-Wdouble-promotion]
      case 'R': if(PWM1_Pulsewidth>0.5 && PWM1_Pulsewidth<=2.5)    PWM1_Pulsewidth-= PWM1_interval;
                                          ^~~~~~~~~~~~~~~~~
LAB_RC_CAR_Control_Bluetooth.c(137): warning: implicit conversion increases floating-point precision: 'volatile float' to 'double' [-Wdouble-promotion]
      case 'R': if(PWM1_Pulsewidth>0.5 && PWM1_Pulsewidth<=2.5)    PWM1_Pulsewidth-= PWM1_interval;
                   ^~~~~~~~~~~~~~~~
LAB_RC_CAR_Control_Bluetooth.c(139): warning: implicit conversion increases floating-point precision: 'volatile float' to 'double' [-Wdouble-promotion]
      case 'L': if(PWM1_Pulsewidth>=0.5 && PWM1_Pulsewidth<2.5)    PWM1_Pulsewidth+= PWM1_interval;
                                           ^~~~~~~~~~~~~~~~
LAB_RC_CAR_Control_Bluetooth.c(139): warning: implicit conversion increases floating-point precision: 'volatile float' to 'double' [-Wdouble-promotion]
      case 'L': if(PWM1_Pulsewidth>=0.5 && PWM1_Pulsewidth<2.5)    PWM1_Pulsewidth+= PWM1_interval;
                   ^~~~~~~~~~~~~~~~~
LAB_RC_CAR_Control_Bluetooth.c(172): warning: implicit conversion increases floating-point precision: 'float' to 'double' [-Wdouble-promotion]
      if(DIR==0) printf("RC Car:: Servo Motor: %.1f[deg]  DC Motor Duty: %.1f [percent]  FWD\r\n", 180-(duty_1*1800-45), duty_2*100); 
                 ~~~~~~                                                                                                  ~~~~~~^~~~
LAB_RC_CAR_Control_Bluetooth.c(172): warning: implicit conversion increases floating-point precision: 'float' to 'double' [-Wdouble-promotion]
      if(DIR==0) printf("RC Car:: Servo Motor: %.1f[deg]  DC Motor Duty: %.1f [percent]  FWD\r\n", 180-(duty_1*1800-45), duty_2*100); 
                 ~~~~~~                                                                            ~~~^~~~~~~~~~~~~~~~~
LAB_RC_CAR_Control_Bluetooth.c(174): warning: implicit conversion increases floating-point precision: 'float' to 'double' [-Wdouble-promotion]
      if(DIR==1) printf("RC Car:: Servo Motor: %.1f[deg]  DC Motor Duty: %.1f [percent]  BWD\r\n", 180-(duty_1*1800-45), duty_2*100); 
                 ~~~~~~                                                                                                  ~~~~~~^~~~
LAB_RC_CAR_Control_Bluetooth.c(174): warning: implicit conversion increases floating-point precision: 'float' to 'double' [-Wdouble-promotion]
      if(DIR==1) printf("RC Car:: Servo Motor: %.1f[deg]  DC Motor Duty: %.1f [percent]  BWD\r\n", 180-(duty_1*1800-45), duty_2*100); 
                 ~~~~~~                                                                            ~~~^~~~~~~~~~~~~~~~~
LAB_RC_CAR_Control_Bluetooth.c(176): warning: implicit conversion increases floating-point precision: 'float' to 'double' [-Wdouble-promotion]
      if(DIR==2) printf("RC Car:: Servo Motor: %.1f[deg]  DC Motor Duty: %.1f [percent]  STOP\r\n", 180-(duty_1*1800-45), duty_2*100);
                 ~~~~~~                                                                                                   ~~~~~~^~~~
LAB_RC_CAR_Control_Bluetooth.c(176): warning: implicit conversion increases floating-point precision: 'float' to 'double' [-Wdouble-promotion]
      if(DIR==2) printf("RC Car:: Servo Motor: %.1f[deg]  DC Motor Duty: %.1f [percent]  STOP\r\n", 180-(duty_1*1800-45), duty_2*100);
                 ~~~~~~                                                                             ~~~^~~~~~~~~~~~~~~~~
LAB_RC_CAR_Control_Bluetooth.c(178): warning: implicit conversion changes signedness: 'int' to 'uint32_t' (aka 'unsigned int') [-Wsign-conversion]
      delay_ms(delay);
      ~~~~~~~~ ^~~~~
LAB_RC_CAR_Control_Bluetooth.c(47): warning: no previous extern declaration for non-static variable 'pwm_1' [-Wmissing-variable-declarations]
PWM_t pwm_1;   // Servo Motor
      ^
LAB_RC_CAR_Control_Bluetooth.c(47): note: declare 'static' if the variable is not intended to be used outside of this translation unit
PWM_t pwm_1;   // Servo Motor
^
LAB_RC_CAR_Control_Bluetooth.c(48): warning: no previous extern declaration for non-static variable 'pwm_2' [-Wmissing-variable-declarations]
PWM_t pwm_2;   // DC Motor
      ^
LAB_RC_CAR_Control_Bluetooth.c(48): note: declare 'static' if the variable is not intended to be used outside of this translation unit
PWM_t pwm_2;   // DC Motor
^
24 warnings generated.
compiling LAB_RC_CAR_Control_Bluetooth.c...
linking...
Program Size: Code=8956 RO-data=828 RW-data=40 ZI-data=1792  
FromELF: creating hex file...
".\Objects\LAB_RC_CAR_Control_Bluetooth.axf" - 0 Error(s), 24 Warning(s).

<h2>Software Packages used:</h2>

Package Vendor: ARM
                http://www.keil.com/pack/ARM.CMSIS.5.8.0.pack
                ARM.CMSIS.5.8.0
                CMSIS (Common Microcontroller Software Interface Standard)
   * Component: CORE Version: 5.5.0

Package Vendor: Keil
                http://www.keil.com/pack/Keil.STM32F4xx_DFP.2.15.0.pack
                Keil.STM32F4xx_DFP.2.15.0
                STMicroelectronics STM32F4 Series Device Support, Drivers and Examples
   * Component: Startup Version: 2.6.3

<h2>Collection of Component include folders:</h2>
  .\RTE\_Target_1
  C:\Users\sehye\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include
  C:\Users\sehye\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include

<h2>Collection of Component Files used:</h2>

   * Component: ARM::CMSIS:CORE:5.5.0

   * Component: Keil::Device:Startup:2.6.3
      Include file:  Drivers\CMSIS\Device\ST\STM32F4xx\Include\stm32f4xx.h
      Source file:   MDK\Device\Source\ARM\STM32F4xx_OTP.s
      Source file:   Drivers\CMSIS\Device\ST\STM32F4xx\Source\Templates\arm\startup_stm32f411xe.s
      Source file:   MDK\Device\Source\ARM\STM32F411xx_OPT.s
      Source file:   Drivers\CMSIS\Device\ST\STM32F4xx\Source\Templates\system_stm32f4xx.c
Build Time Elapsed:  00:00:01
</pre>
</body>
</html>
