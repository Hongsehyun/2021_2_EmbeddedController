<html>
<body>
<pre>
<h1>µVision Build Log</h1>
<h2>Tool Versions:</h2>
IDE-Version: •ÏVision V5.35.0.0
Copyright (C) 2021 ARM Ltd and ARM Germany GmbH. All rights reserved.
License Information: Sehyun Hong, Handong Global University, LIC=----
 
Tool Versions:
Toolchain:       MDK-Lite  Version: 5.35.0.2
Toolchain Path:  C:\Keil_v5\ARM\ARMCLANG\Bin
C Compiler:      ArmClang.exe V6.16
Assembler:       Armasm.exe V6.16
Linker/Locator:  ArmLink.exe V6.16
Library Manager: ArmAr.exe V6.16
Hex Converter:   FromElf.exe V6.16
CPU DLL:         SARMCM3.DLL V5.35.0.2
Dialog DLL:      DCM.DLL V1.17.3.0
Target DLL:      STLink\ST-LINKIII-KEIL_SWO.dll V3.0.9.0
Dialog DLL:      TCM.DLL V1.53.0.0
 
<h2>Project:</h2>
C:\Users\sehye\source\repos\EC_2021\LAB\LAB_TIMER_Inputcapture_Ultrasonic\LAB_TIMER_Inputcapture_Ultrasonic.uvprojx
Project File Date:  11/09/2021

<h2>Output:</h2>
*** Using Compiler 'V6.16', folder: 'C:\Keil_v5\ARM\ARMCLANG\Bin'
Rebuild target 'Target 1'
../../Lib/ecRCC.c(7): warning: no previous extern declaration for non-static variable 'EC_SYSCLK' [-Wmissing-variable-declarations]
volatile int EC_SYSCLK=16000000;
             ^
../../Lib/ecRCC.c(7): note: declare 'static' if the variable is not intended to be used outside of this translation unit
volatile int EC_SYSCLK=16000000;
         ^
../../Lib/ecRCC.c(16): warning: empty expression statement has no effect; remove unnecessary ';' to silence this warning [-Wextra-semi-stmt]
        while ( (RCC->CR & 0x00000002U) == 0 ) {;}
                                                ^
2 warnings generated.
compiling ecRCC.c...
compiling system_stm32f4xx.c...
compiling ecSysTick.c...
../../Lib/ecStepper.c(33): warning: padding struct 'State_full_t' with 3 bytes to align 'next' [-Wpadded]
        uint32_t next[2];
                 ^
../../Lib/ecStepper.c(49): warning: padding struct 'State_half_t' with 3 bytes to align 'next' [-Wpadded]
        uint32_t next[2];
                 ^
../../Lib/ecStepper.c(111): warning: implicit conversion changes signedness: 'long' to 'unsigned long' [-Wsign-conversion]
  if(mode==FULL)   step_delay = (uint32_t)(60000*1000)/(whatSpeed*step_per_rev_FULL*Gear_Ratio);
                                                        ^~~~~~~~~~
../../Lib/ecStepper.c(112): warning: implicit conversion changes signedness: 'long' to 'unsigned long' [-Wsign-conversion]
  if(mode==HALF)         step_delay = (uint32_t)(60000*1000)/(whatSpeed*step_per_rev_HALF*Gear_Ratio);
                                                              ^~~~~~~~~~
../../Lib/ecStepper.c(149): warning: implicit conversion changes signedness: 'volatile int' to 'unsigned int' [-Wsign-conversion]
        GPIO_write(myStepper.port1, myStepper.pin1, myStepper._step_num);
        ~~~~~~~~~~                                  ~~~~~~~~~~^~~~~~~~~
../../Lib/ecStepper.c(150): warning: implicit conversion changes signedness: 'volatile int' to 'unsigned int' [-Wsign-conversion]
        GPIO_write(myStepper.port2, myStepper.pin2, myStepper._step_num);
        ~~~~~~~~~~                                  ~~~~~~~~~~^~~~~~~~~
../../Lib/ecStepper.c(151): warning: implicit conversion changes signedness: 'volatile int' to 'unsigned int' [-Wsign-conversion]
  GPIO_write(myStepper.port3, myStepper.pin3, myStepper._step_num);
  ~~~~~~~~~~                                  ~~~~~~~~~~^~~~~~~~~
../../Lib/ecStepper.c(152): warning: implicit conversion changes signedness: 'volatile int' to 'unsigned int' [-Wsign-conversion]
        GPIO_write(myStepper.port4, myStepper.pin4, myStepper._step_num);
        ~~~~~~~~~~                                  ~~~~~~~~~~^~~~~~~~~
8 warnings generated.
compiling ecStepper.c...
compiling ecGPIO.c...
../../Lib/ecEXTI.c(15): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                SYSCFG->EXTICR[pin>>2] &= ~(0xF << 4*(pin%4));
                                       ~~ ^~~~~~~~~~~~~~~~~~~
../../Lib/ecEXTI.c(16): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
    SYSCFG->EXTICR[pin>>2] |= (PA_x << 4*(pin%4));
                           ~~  ~~~~~^~~~~~~~~~~~
../../Lib/ecEXTI.c(19): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                SYSCFG->EXTICR[pin>>2] &= ~(0xF << 4*(pin%4));
                                       ~~ ^~~~~~~~~~~~~~~~~~~
../../Lib/ecEXTI.c(23): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                SYSCFG->EXTICR[pin>>2] &= ~(0xF << 4*(pin%4));
                                       ~~ ^~~~~~~~~~~~~~~~~~~
../../Lib/ecEXTI.c(24): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
    SYSCFG->EXTICR[pin>>2] |= (PC_x << 4*(pin%4));
                           ~~  ~~~~~^~~~~~~~~~~~
../../Lib/ecEXTI.c(27): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                SYSCFG->EXTICR[pin>>2] &= ~(0xF << 4*(pin%4));
                                       ~~ ^~~~~~~~~~~~~~~~~~~
../../Lib/ecEXTI.c(28): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
    SYSCFG->EXTICR[pin>>2] |= (PD_x << 4*(pin%4));
                           ~~  ~~~~~^~~~~~~~~~~~
../../Lib/ecEXTI.c(31): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                SYSCFG->EXTICR[pin>>2] &= ~(0xF << 4*(pin%4));
                                       ~~ ^~~~~~~~~~~~~~~~~~~
../../Lib/ecEXTI.c(32): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
    SYSCFG->EXTICR[pin>>2] |= (PE_x << 4*(pin%4));
                           ~~  ~~~~~^~~~~~~~~~~~
../../Lib/ecEXTI.c(35): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                SYSCFG->EXTICR[pin>>2] &= ~(0xF << 4*(pin%4));
                                       ~~ ^~~~~~~~~~~~~~~~~~~
../../Lib/ecEXTI.c(36): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
    SYSCFG->EXTICR[pin>>2] |= (PH_x << 4*(pin%4));
                           ~~  ~~~~~^~~~~~~~~~~~
11 warnings generated.
compiling ecEXTI.c...
LAB_TIMER_Inputcapture_Ultrasonic.c(19): warning: In file included from...
../../Lib\ecUART.h(40): warning: this function declaration is not a prototype [-Wstrict-prototypes]
void UART2_init();
               ^
                void
LAB_TIMER_Inputcapture_Ultrasonic.c(74): warning: implicit conversion from 'volatile uint32_t' (aka 'volatile unsigned int') to 'float' may lose precision [-Wimplicit-int-float-conversion]
                timeSt = TIM2->CCR3;                                    // Capture TimeStart from CC3
                       ~ ~~~~~~^~~~
LAB_TIMER_Inputcapture_Ultrasonic.c(80): warning: implicit conversion from 'volatile uint32_t' (aka 'volatile unsigned int') to 'float' may lose precision [-Wimplicit-int-float-conversion]
                timeEnd = TIM2->CCR4;                                   // Capture TimeEnd from CC4
                        ~ ~~~~~~^~~~
LAB_TIMER_Inputcapture_Ultrasonic.c(85): warning: implicit conversion from 'unsigned int' to 'float' may lose precision [-Wimplicit-int-float-conversion]
                timeInterval = PulseWidth*((timeEnd-timeSt)+(0XFFFF*ovf_cnt));
                                                           ~ ~~~~~~^~~~~~~~
LAB_TIMER_Inputcapture_Ultrasonic.c(86): warning: implicit conversion increases floating-point precision: 'float' to 'double' [-Wdouble-promotion]
                distance     = (float) timeInterval/58;   // Ultrasonic speed[m/s] * echo pulse duration[us]
                             ~ ~~~~~~~~~~~~~~~~~~~~^~~
5 warnings generated.
compiling LAB_TIMER_Inputcapture_Ultrasonic.c...
../../Lib/ecPWM.c(39): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        port->AFR[pin>>3] &= ~(0xF<<(4*(pin%8)));
                          ~~ ^~~~~~~~~~~~~~~~~~~
../../Lib/ecPWM.c(126): warning: implicit conversion turns floating-point number into integer: 'float' to 'uint32_t' (aka 'unsigned int') [-Wfloat-conversion]
        uint32_t ccval = pulse_width_ms*fclk;   // width_ms *fclk;
                 ~~~~~   ~~~~~~~~~~~~~~^~~~~
../../Lib/ecPWM.c(150): warning: implicit conversion turns floating-point number into integer: 'float' to 'uint32_t' (aka 'unsigned int') [-Wfloat-conversion]
        uint32_t ccval = pulse_width_us*fclk;   // width_ms *fclk;
                 ~~~~~   ~~~~~~~~~~~~~~^~~~~
../../Lib/ecPWM.c(165): warning: implicit conversion from 'unsigned int' to 'float' may lose precision [-Wimplicit-int-float-conversion]
        float ccval = (pwm->timer->ARR+1)*duty;                                         // (ARR+1)*dutyRatio 
                       ~~~~~~~~~~~~~~~^~ ~
../../Lib/ecPWM.c(169): warning: implicit conversion turns floating-point number into integer: 'float' to 'uint32_t' (aka 'unsigned int') [-Wfloat-conversion]
                case 1: TIMx->CCR1 = ccval; break;
                                   ~ ^~~~~
../../Lib/ecPWM.c(170): warning: implicit conversion turns floating-point number into integer: 'float' to 'uint32_t' (aka 'unsigned int') [-Wfloat-conversion]
                case 2: TIMx->CCR2 = ccval; break;
                                   ~ ^~~~~
../../Lib/ecPWM.c(171): warning: implicit conversion turns floating-point number into integer: 'float' to 'uint32_t' (aka 'unsigned int') [-Wfloat-conversion]
                case 3: TIMx->CCR3 = ccval; break;
                                   ~ ^~~~~
../../Lib/ecPWM.c(172): warning: implicit conversion turns floating-point number into integer: 'float' to 'uint32_t' (aka 'unsigned int') [-Wfloat-conversion]
                case 4: TIMx->CCR4 = ccval; break;
                                   ~ ^~~~~
8 warnings generated.
compiling ecPWM.c...
../../Lib/ecUART.c(1): warning: In file included from...
../../Lib/ecUART.h(40): warning: this function declaration is not a prototype [-Wstrict-prototypes]
void UART2_init();
               ^
                void
../../Lib/ecUART.c(21): warning: unused parameter 'f' [-Wunused-parameter]
int fputc(int ch, FILE *f) { 
                        ^
../../Lib/ecUART.c(29): warning: unused parameter 'f' [-Wunused-parameter]
int fgetc(FILE *f) {  
                ^
../../Lib/ecUART.c(49): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        GPIOA->MODER   &= ~(0xF << (2*TX_pin)); // Clear bits
                       ~~ ^~~~~~~~~~~~~~~~~~~~
../../Lib/ecUART.c(50): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        GPIOA->MODER   |=   0xA << (2*TX_pin);  // Alternate Function(10)               
                       ~~   ~~~~^~~~~~~~~~~~~
../../Lib/ecUART.c(51): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        GPIOA->AFR[0]  |=   0x77<< (4*TX_pin);  // AF7 - USART2         
                       ~~   ~~~~^~~~~~~~~~~~~
../../Lib/ecUART.c(52): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        GPIOA->OSPEEDR |=   0xF<<(2*TX_pin);            // High speed (11)                                      
                       ~~   ~~~^~~~~~~~~~~~
../../Lib/ecUART.c(53): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        GPIOA->PUPDR   &= ~(0xF<<(2*TX_pin));
                       ~~ ^~~~~~~~~~~~~~~~~~
../../Lib/ecUART.c(54): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        GPIOA->PUPDR   |=   0x5<<(2*TX_pin);    // Pull-up (01)                 
                       ~~   ~~~^~~~~~~~~~~~
../../Lib/ecUART.c(55): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        GPIOA->OTYPER  &=  ~(0x3<<TX_pin) ;             // push-pull (0, reset)
                       ~~  ^~~~~~~~~~~~~~
../../Lib/ecUART.c(79): warning: implicit conversion turns floating-point number into integer: 'double' to 'uint32_t' (aka 'unsigned int') [-Wfloat-conversion]
        uint32_t FRC = round((USARTDIV - MNT) * 16);
                 ~~~   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
../../Lib/ecUART.c(79): warning: implicit conversion increases floating-point precision: 'float' to 'double' [-Wdouble-promotion]
        uint32_t FRC = round((USARTDIV - MNT) * 16);
                       ~~~~~ ~~~~~~~~~~~~~~~~~^~~~
../../Lib/ecUART.c(79): warning: implicit conversion from 'uint32_t' (aka 'unsigned int') to 'float' may lose precision [-Wimplicit-int-float-conversion]
        uint32_t FRC = round((USARTDIV - MNT) * 16);
                                       ~ ^~~
../../Lib/ecUART.c(35): warning: no previous prototype for function 'UART2_init' [-Wmissing-prototypes]
void UART2_init(){
     ^
../../Lib/ecUART.h(40): note: this declaration is not a prototype; add 'void' to make it a prototype for a zero-parameter function
void UART2_init();
     ^
                void
../../Lib/ecUART.c(35): warning: this old-style function definition is not preceded by a prototype [-Wstrict-prototypes]
void UART2_init(){
               ^
../../Lib/ecUART.c(100): warning: comparison of integers of different signs: 'int' and 'uint32_t' (aka 'unsigned int') [-Wsign-compare]
        for (i = 0; i < nBytes; i++) {
                    ~ ^ ~~~~~~
../../Lib/ecUART.c(144): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                if(pinTX<8) GPIO_TX->AFR[0]  |=  8 << (4*pinTX);                 
                                             ~~  ~~^~~~~~~~~~~~
../../Lib/ecUART.c(145): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                else        GPIO_TX->AFR[1]  |=  8 << (4*(pinTX-8));                    
                                             ~~  ~~^~~~~~~~~~~~~~~~
../../Lib/ecUART.c(147): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                if(pinRX<8) GPIO_RX->AFR[0]  |=  8 << (4*pinRX);                 
                                             ~~  ~~^~~~~~~~~~~~
../../Lib/ecUART.c(148): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                else        GPIO_RX->AFR[1]  |=  8 << (4*(pinRX-8));                    
                                             ~~  ~~^~~~~~~~~~~~~~~~
../../Lib/ecUART.c(152): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                if(pinTX<8) GPIO_TX->AFR[0]  |=  7 << (4*pinTX);                 
                                             ~~  ~~^~~~~~~~~~~~
../../Lib/ecUART.c(153): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                else        GPIO_TX->AFR[1]  |=  7 << (4*(pinTX-8));                             
                                             ~~  ~~^~~~~~~~~~~~~~~~
../../Lib/ecUART.c(155): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                if(pinRX<8) GPIO_RX->AFR[0]  |=  7 << (4*pinRX);                 
                                             ~~  ~~^~~~~~~~~~~~
../../Lib/ecUART.c(156): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                else        GPIO_RX->AFR[1]  |=  7 << (4*(pinRX-8));                            
                                             ~~  ~~^~~~~~~~~~~~~~~~
../../Lib/ecUART.c(193): warning: implicit conversion turns floating-point number into integer: 'float' to 'uint16_t' (aka 'unsigned short') [-Wfloat-conversion]
        uint16_t USARTDIV = (float) ( Hz/(16*baud) );
                 ~~~~~~~~   ^~~~~~~~~~~~~~~~~~~~~~~~
../../Lib/ecUART.c(193): warning: implicit conversion from 'int' to 'float' may lose precision [-Wimplicit-int-float-conversion]
        uint16_t USARTDIV = (float) ( Hz/(16*baud) );
                                        ~ ~~^~~~~
../../Lib/ecUART.c(198): warning: implicit conversion turns floating-point number into integer: 'double' to 'uint32_t' (aka 'unsigned int') [-Wfloat-conversion]
        uint32_t FRC = round((USARTDIV - MNT) * 16);
                 ~~~   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
../../Lib/ecUART.c(269): warning: variable 'GPIO_TX' may be uninitialized when used here [-Wconditional-uninitialized]
        USART_begin(USARTx, GPIO_TX, pinTX, GPIO_RX, pinRX, baud);
                            ^~~~~~~
../../Lib/ecUART.c(244): note: initialize the variable 'GPIO_TX' to silence this warning
        GPIO_TypeDef* GPIO_TX; 
                             ^
                              = NULL
../../Lib/ecUART.c(269): warning: variable 'GPIO_RX' may be uninitialized when used here [-Wconditional-uninitialized]
        USART_begin(USARTx, GPIO_TX, pinTX, GPIO_RX, pinRX, baud);
                                            ^~~~~~~
../../Lib/ecUART.c(245): note: initialize the variable 'GPIO_RX' to silence this warning
        GPIO_TypeDef* GPIO_RX;
                             ^
                              = NULL
29 warnings generated.
compiling ecUART.c...
assembling startup_stm32f411xe.s...
../../Lib/ecTIM.c(91): warning: variable 'prescaler' is used uninitialized whenever 'if' condition is false [-Wsometimes-uninitialized]
        else if((RCC->CFGR & (3<<0)) == 0) { prescaler = 1600; }
                ^~~~~~~~~~~~~~~~~~~~~~~~~
../../Lib/ecTIM.c(96): note: uninitialized use occurs here
        TIMx->PSC = prescaler-1;                                        
                    ^~~~~~~~~
../../Lib/ecTIM.c(91): note: remove the 'if' if its condition is always true
        else if((RCC->CFGR & (3<<0)) == 0) { prescaler = 1600; }
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../../Lib/ecTIM.c(86): note: initialize the variable 'prescaler' to silence this warning
        uint32_t prescaler;
                          ^
                           = 0
../../Lib/ecTIM.c(111): warning: variable 'prescaler' is used uninitialized whenever 'if' condition is false [-Wsometimes-uninitialized]
        else if((RCC->CFGR & (3<<0)) == 0) { prescaler = 16; }
                ^~~~~~~~~~~~~~~~~~~~~~~~~
../../Lib/ecTIM.c(115): note: uninitialized use occurs here
        TIMx->PSC = prescaler-1;                                        
                    ^~~~~~~~~
../../Lib/ecTIM.c(111): note: remove the 'if' if its condition is always true
        else if((RCC->CFGR & (3<<0)) == 0) { prescaler = 16; }
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../../Lib/ecTIM.c(106): note: initialize the variable 'prescaler' to silence this warning
        uint32_t prescaler;
                          ^
                           = 0
../../Lib/ecTIM.c(164): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
  port->AFR[pin>>3] &= ~(0xF<<(4*(pin%8)));
                    ~~ ^~~~~~~~~~~~~~~~~~~
../../Lib/ecTIM.c(252): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        TIMx->CCER &= ~(5<<(((ICn-1)*4)+1));                                                                            // Clear CCnNP/CCnP bits for ICn
                   ~~ ^~~~~~~~~~~~~~~~~~~~~
../../Lib/ecTIM.c(254): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                case RISE: TIMx->CCER &= ~(5<<(((ICn-1)*4)+1));  break; //rising:  00
                                      ~~ ^~~~~~~~~~~~~~~~~~~~~
../../Lib/ecTIM.c(256): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                case BOTH: TIMx->CCER |= (5<<(((ICn-1)*4)+1));   break; //both:    11
                                      ~~  ~^~~~~~~~~~~~~~~~~
../../Lib/ecTIM.c(268): warning: implicit conversion changes signedness: 'int' to 'uint32_t' (aka 'unsigned int') [-Wsign-conversion]
        TIMx->PSC = 84*usec-1;                                            // Timer counter clock: 1us * usec
                  ~ ~~~~~~~^~
../../Lib/ecTIM.c(280): warning: non-void function does not return a value in all control paths [-Wreturn-type]
}
^
../../Lib/ecTIM.c(278): warning: 'break' will never be executed [-Wunreachable-code-break]
    case 4 : return ((TIMx->SR & TIM_SR_CC4IF) == TIM_SR_CC4IF);        break;
                                                                        ^~~~~
../../Lib/ecTIM.c(277): warning: 'break' will never be executed [-Wunreachable-code-break]
    case 3 : return ((TIMx->SR & TIM_SR_CC3IF) == TIM_SR_CC3IF);        break;
                                                                        ^~~~~
../../Lib/ecTIM.c(276): warning: 'break' will never be executed [-Wunreachable-code-break]
    case 2 : return ((TIMx->SR & TIM_SR_CC2IF) == TIM_SR_CC2IF);        break;
                                                                        ^~~~~
../../Lib/ecTIM.c(275): warning: 'break' will never be executed [-Wunreachable-code-break]
    case 1 : return ((TIMx->SR & TIM_SR_CC1IF) == TIM_SR_CC1IF);        break;
                                                                        ^~~~~
12 warnings generated.
compiling ecTIM.c...
linking...
Program Size: Code=9440 RO-data=664 RW-data=8 ZI-data=1680  
FromELF: creating hex file...
".\Objects\LAB_TIMER_Inputcapture_Ultrasonic.axf" - 0 Error(s), 75 Warning(s).

<h2>Software Packages used:</h2>

Package Vendor: ARM
                http://www.keil.com/pack/ARM.CMSIS.5.8.0.pack
                ARM.CMSIS.5.8.0
                CMSIS (Common Microcontroller Software Interface Standard)
   * Component: CORE Version: 5.5.0

Package Vendor: Keil
                http://www.keil.com/pack/Keil.STM32F4xx_DFP.2.15.0.pack
                Keil.STM32F4xx_DFP.2.15.0
                STMicroelectronics STM32F4 Series Device Support, Drivers and Examples
   * Component: Startup Version: 2.6.3

<h2>Collection of Component include folders:</h2>
  .\RTE\_Target_1
  C:\Users\sehye\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include
  C:\Users\sehye\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include

<h2>Collection of Component Files used:</h2>

   * Component: ARM::CMSIS:CORE:5.5.0

   * Component: Keil::Device:Startup:2.6.3
      Source file:   Drivers\CMSIS\Device\ST\STM32F4xx\Source\Templates\arm\startup_stm32f411xe.s
      Source file:   MDK\Device\Source\ARM\STM32F411xx_OPT.s
      Source file:   MDK\Device\Source\ARM\STM32F4xx_OTP.s
      Include file:  Drivers\CMSIS\Device\ST\STM32F4xx\Include\stm32f4xx.h
      Source file:   Drivers\CMSIS\Device\ST\STM32F4xx\Source\Templates\system_stm32f4xx.c
Build Time Elapsed:  00:00:01
</pre>
</body>
</html>
